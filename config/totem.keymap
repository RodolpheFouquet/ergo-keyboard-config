#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> 
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include "zmk-helpers/unicode-chars/french.dtsi"
#include "zmk-helpers/unicode-chars/currency.dtsi"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

#define BASE 0
#define SYM 1
#define NUM 2
#define SYSTEM  3 

#define QUICK_TAP_MS 175
#define SLOW_TAP 300

ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <QUICK_TAP_MS>;)

ZMK_COMBO(copy_cut, &copy_cut,   LB2 LB3, ALL)  // copy on tap, cut on double-tap, active on all layers
ZMK_COMBO(paste,    &kp LC(V), LB1 LB2, ALL)
ZMK_COMBO(undo ,    &kp LC(Z), LB4 LB3, ALL)
ZMK_COMBO(redo ,    &kp LC(LS(Z)), LB4 LB1, ALL)

ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <200>;
    require-prior-idle-ms = <QUICK_TAP_MS>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <200>;
    require-prior-idle-ms = <QUICK_TAP_MS>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <200>;)


/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <SYM NUM>;
            then-layer = <SYSTEM>;
        };
    };
    behaviors {
        par: par {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Parenthesis left and right";
            #binding-cells = <0>;
            tapping-term-ms = <SLOW_TAP>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };
        brack: brack {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Brackets left and right";
            #binding-cells = <0>;
            tapping-term-ms = <SLOW_TAP>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };
        brace: brace {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Braces left and right";
            #binding-cells = <0>;
            tapping-term-ms = <SLOW_TAP>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
        };
        more: more {
            compatible = "zmk,behavior-tap-dance";
            display-name = "greater and less than";
            #binding-cells = <0>;
            tapping-term-ms = <SLOW_TAP>;
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;
        };
    };


    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <RM1 RM2>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <RM1 RM0>;
        };

        goequal {
            bindings = <&goequal>;
            key-positions = <LM1 LM2>;
        };

        saveandquit {
            bindings = <&savequit>;
            key-positions = <LT3 LT4>;
        };
        tab {
            bindings = <&tab>;
            key-positions = <LM3 LM2>;
        };
        escape {
            bindings = <&escape>;
            key-positions = <LM3 LM4>;
        };
    };

    macros {
        goequal: goequal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "GOEQUAL";
        };

        escape: escape {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC>;
            label = "ESCAPE";
        };

        tab: tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TAB>;
            label = "TAB";
        };

        savequit: savequit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp Q>;
            label = "SAVEQUIT";
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
           &kp Q           &kp W         &kp E          &kp R         &kp T                     &kp Y        &kp U            &kp I          &kp O          &kp P           
           &hml LGUI A     &hml LALT S   &hml LCTRL D   &hml LSHFT F  &kp G                     &kp H        &hmr RSHFT J     &hmr LCTRL K   &hmr LALT L    &hmr LGUI SEMI  
&kp LSHIFT    &kp Z           &kp X         &kp C          &kp V         &kp B                     &kp N        &kp M            &kp COMMA      &kp DOT        &kp FSLH        &kp ESC
                                         &kp LGUI       &mo SYM       &kp SPACE                 &kp ENTER    SMART_NUM        &kp BSPC
            >;
        };

        sym_layer {
            display-name = "Symbols";
            bindings = < 
        &kp EXCL    &kp AT  &kp POUND   &kp DOLLAR  &kp PERCENT                &kp CARET  &kp AMPERSAND  &kp ASTRK     &kp SLASH          &kp BACKSLASH 
        &par        &brace  &brack      &kp DOT     &kp COLON                  &kp UNDER  &kp PIPE       &kp EQUAL     &kp SINGLE_QUOTE   &kp GRAVE       
&trans  &more       &trans  &trans      &kp COMMA   &kp SEMI                   &kp MINUS  &kp PLUS       &kp QUESTION  &kp DOUBLE_QUOTES  &kp TILDE        &trans
                            &trans      &trans      &trans                     &kp INS    &kp DEL        &trans
            >;
        };

        num_layer {
            display-name = "Num";
            bindings = <
        &kp N1  &kp N2  &kp N3 &kp N4 &kp N5            &trans             &trans            &kp UP        &trans    &trans 
        &kp N6  &kp N7  &kp N8 &kp N9 &kp N0            &trans             &kp LEFT          &kp DOWN      &kp RIGHT &trans  
&trans  &trans  &trans  &trans &trans &trans            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_MUTE    &trans    &trans   &trans 
                        &trans &trans &trans            &kp RET            &trans            &trans
            >;
        };

        system_layer {
            display-name = "System";
            bindings = <
                &sys_reset  &bt BT_CLR &out OUT_TOG &trans      &trans          &trans      &kp F7      &kp F8      &kp F9      &kp F12
                &bootloader &bt BT_NXT  &trans      &trans      &trans          &trans      &kp F4      &kp F5      &kp F6      &kp F11  
    &trans      &trans      &bt BT_PRV  &trans      &trans      &trans          &trans      &kp F1      &kp F2      &kp F3      &kp F10     &trans         
                                        &trans      &trans      &trans          &trans      &trans      &trans      

            >;
        };

    };
};
